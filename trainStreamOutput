[32m[04/15 13:55:27 d2.engine.defaults]: [0mModel:
RetinaNet(
  (backbone): FPN(
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelP6P7(
      (p6): Conv2d(2048, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (head): RetinaNetHead(
    (cls_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (bbox_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (cls_score): Conv2d(256, 18, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (bbox_pred): Conv2d(256, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (anchor_generator): DefaultAnchorGenerator(
    (cell_anchors): BufferList()
  )
)
[32m[04/15 13:55:34 d2.data.build]: [0mRemoved 26 images with no usable annotations. 140 images left.
[32m[04/15 13:55:34 d2.data.build]: [0mDistribution of instances among all 2 categories:
[36m|   category   | #instances   |  category  | #instances   |
|:------------:|:-------------|:----------:|:-------------|
| atlantic_cod | 4582         |   seithe   | 0            |
|              |              |            |              |
|    total     | 4582         |            |              |[0m
[32m[04/15 13:55:34 d2.data.common]: [0mSerializing 140 elements to byte tensors and concatenating them all ...
[32m[04/15 13:55:34 d2.data.common]: [0mSerialized dataset takes 0.17 MiB
[32m[04/15 13:55:34 d2.data.detection_utils]: [0mTransformGens used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[32m[04/15 13:55:34 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[04/15 13:55:35 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[04/15 13:56:33 d2.utils.events]: [0m eta: 0:23:33  iter: 19  total_loss: 2.374  loss_cls: 1.764  loss_box_reg: 0.602  time: 2.9311  data_time: 0.0175  lr: 0.000020  max_mem: 4111M
[32m[04/15 13:57:32 d2.utils.events]: [0m eta: 0:22:41  iter: 39  total_loss: 1.500  loss_cls: 1.140  loss_box_reg: 0.360  time: 2.9367  data_time: 0.0085  lr: 0.000040  max_mem: 4152M
[32m[04/15 13:58:31 d2.utils.events]: [0m eta: 0:21:43  iter: 59  total_loss: 1.058  loss_cls: 0.773  loss_box_reg: 0.282  time: 2.9436  data_time: 0.0078  lr: 0.000060  max_mem: 4152M
[32m[04/15 13:59:32 d2.utils.events]: [0m eta: 0:20:54  iter: 79  total_loss: 1.036  loss_cls: 0.710  loss_box_reg: 0.313  time: 2.9610  data_time: 0.0085  lr: 0.000080  max_mem: 4161M
[32m[04/15 14:00:32 d2.utils.events]: [0m eta: 0:19:58  iter: 99  total_loss: 0.792  loss_cls: 0.517  loss_box_reg: 0.288  time: 2.9697  data_time: 0.0075  lr: 0.000100  max_mem: 4161M
[32m[04/15 14:01:32 d2.utils.events]: [0m eta: 0:19:00  iter: 119  total_loss: 0.775  loss_cls: 0.489  loss_box_reg: 0.276  time: 2.9757  data_time: 0.0074  lr: 0.000120  max_mem: 4161M
[32m[04/15 14:02:31 d2.utils.events]: [0m eta: 0:18:01  iter: 139  total_loss: 0.705  loss_cls: 0.446  loss_box_reg: 0.251  time: 2.9757  data_time: 0.0079  lr: 0.000140  max_mem: 4163M
[32m[04/15 14:03:31 d2.utils.events]: [0m eta: 0:17:03  iter: 159  total_loss: 0.664  loss_cls: 0.415  loss_box_reg: 0.244  time: 2.9780  data_time: 0.0079  lr: 0.000160  max_mem: 4163M
[32m[04/15 14:04:32 d2.utils.events]: [0m eta: 0:16:05  iter: 179  total_loss: 0.634  loss_cls: 0.383  loss_box_reg: 0.247  time: 2.9828  data_time: 0.0079  lr: 0.000180  max_mem: 4163M
[32m[04/15 14:05:31 d2.utils.events]: [0m eta: 0:15:04  iter: 199  total_loss: 0.604  loss_cls: 0.360  loss_box_reg: 0.244  time: 2.9803  data_time: 0.0076  lr: 0.000200  max_mem: 4163M
[32m[04/15 14:06:30 d2.utils.events]: [0m eta: 0:14:04  iter: 219  total_loss: 0.502  loss_cls: 0.304  loss_box_reg: 0.198  time: 2.9771  data_time: 0.0080  lr: 0.000220  max_mem: 4163M
[32m[04/15 14:07:29 d2.utils.events]: [0m eta: 0:13:04  iter: 239  total_loss: 0.542  loss_cls: 0.323  loss_box_reg: 0.219  time: 2.9770  data_time: 0.0079  lr: 0.000240  max_mem: 4163M
[32m[04/15 14:08:29 d2.utils.events]: [0m eta: 0:12:04  iter: 259  total_loss: 0.545  loss_cls: 0.316  loss_box_reg: 0.230  time: 2.9761  data_time: 0.0074  lr: 0.000260  max_mem: 4163M
[32m[04/15 14:09:29 d2.utils.events]: [0m eta: 0:11:04  iter: 279  total_loss: 0.503  loss_cls: 0.297  loss_box_reg: 0.212  time: 2.9773  data_time: 0.0080  lr: 0.000280  max_mem: 4163M
[32m[04/15 14:10:29 d2.utils.events]: [0m eta: 0:10:04  iter: 299  total_loss: 0.469  loss_cls: 0.271  loss_box_reg: 0.199  time: 2.9787  data_time: 0.0076  lr: 0.000300  max_mem: 4163M
[32m[04/15 14:11:29 d2.utils.events]: [0m eta: 0:09:05  iter: 319  total_loss: 0.480  loss_cls: 0.277  loss_box_reg: 0.205  time: 2.9809  data_time: 0.0079  lr: 0.000320  max_mem: 4163M
[32m[04/15 14:12:29 d2.utils.events]: [0m eta: 0:08:05  iter: 339  total_loss: 0.503  loss_cls: 0.298  loss_box_reg: 0.204  time: 2.9833  data_time: 0.0076  lr: 0.000340  max_mem: 4166M
[32m[04/15 14:13:29 d2.utils.events]: [0m eta: 0:07:05  iter: 359  total_loss: 0.451  loss_cls: 0.262  loss_box_reg: 0.185  time: 2.9823  data_time: 0.0078  lr: 0.000360  max_mem: 4166M
[32m[04/15 14:14:29 d2.utils.events]: [0m eta: 0:06:04  iter: 379  total_loss: 0.481  loss_cls: 0.272  loss_box_reg: 0.207  time: 2.9848  data_time: 0.0076  lr: 0.000380  max_mem: 4166M
[32m[04/15 14:15:28 d2.utils.events]: [0m eta: 0:05:04  iter: 399  total_loss: 0.446  loss_cls: 0.262  loss_box_reg: 0.188  time: 2.9832  data_time: 0.0078  lr: 0.000400  max_mem: 4166M
[32m[04/15 14:16:29 d2.utils.events]: [0m eta: 0:04:04  iter: 419  total_loss: 0.452  loss_cls: 0.258  loss_box_reg: 0.196  time: 2.9853  data_time: 0.0079  lr: 0.000420  max_mem: 4166M
[32m[04/15 14:17:30 d2.utils.events]: [0m eta: 0:03:04  iter: 439  total_loss: 0.453  loss_cls: 0.262  loss_box_reg: 0.192  time: 2.9877  data_time: 0.0080  lr: 0.000440  max_mem: 4166M
[32m[04/15 14:18:30 d2.utils.events]: [0m eta: 0:02:03  iter: 459  total_loss: 0.447  loss_cls: 0.254  loss_box_reg: 0.193  time: 2.9883  data_time: 0.0075  lr: 0.000460  max_mem: 4166M
[32m[04/15 14:19:29 d2.utils.events]: [0m eta: 0:01:03  iter: 479  total_loss: 0.414  loss_cls: 0.237  loss_box_reg: 0.178  time: 2.9878  data_time: 0.0077  lr: 0.000480  max_mem: 4166M
[32m[04/15 14:20:33 d2.utils.events]: [0m eta: 0:00:03  iter: 499  total_loss: 0.449  loss_cls: 0.254  loss_box_reg: 0.192  time: 2.9889  data_time: 0.0076  lr: 0.000500  max_mem: 4166M
[32m[04/15 14:20:51 d2.engine.hooks]: [0mOverall training speed: 497 iterations in 0:24:48 (2.9949 s / it)
[32m[04/15 14:20:51 d2.engine.hooks]: [0mTotal training time: 0:25:10 (0:00:22 on hooks)
[5m[31mWARNING[0m [32m[04/15 14:20:52 d2.evaluation.coco_evaluation]: [0mjson_file was not found in MetaDataCatalog for 'fish_test'. Trying to convert it to COCO format ...
[32m[04/15 14:20:52 d2.data.datasets.coco]: [0mCached annotations in COCO format already exist: outputs/coco_eval/fish_test_coco_format.json
[32m[04/15 14:20:54 d2.data.build]: [0mDistribution of instances among all 2 categories:
[36m|   category   | #instances   |  category  | #instances   |
|:------------:|:-------------|:----------:|:-------------|
| atlantic_cod | 733          |   seithe   | 0            |
|              |              |            |              |
|    total     | 733          |            |              |[0m
[32m[04/15 14:20:54 d2.data.common]: [0mSerializing 42 elements to byte tensors and concatenating them all ...
[32m[04/15 14:20:54 d2.data.common]: [0mSerialized dataset takes 0.03 MiB
[32m[04/15 14:20:54 d2.evaluation.evaluator]: [0mStart inference on 42 images
[32m[04/15 14:20:58 d2.evaluation.evaluator]: [0mInference done 11/42. 0.3645 s / img. ETA=0:00:11
[32m[04/15 14:21:03 d2.evaluation.evaluator]: [0mInference done 25/42. 0.3652 s / img. ETA=0:00:06
[32m[04/15 14:21:09 d2.evaluation.evaluator]: [0mInference done 39/42. 0.3657 s / img. ETA=0:00:01
[32m[04/15 14:21:10 d2.evaluation.evaluator]: [0mTotal inference time: 0:00:13.603677 (0.367667 s / img per device, on 1 devices)
[32m[04/15 14:21:10 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:00:13 (0.365730 s / img per device, on 1 devices)
[32m[04/15 14:21:10 d2.evaluation.coco_evaluation]: [0mPreparing results for COCO format ...
[32m[04/15 14:21:10 d2.evaluation.coco_evaluation]: [0mSaving results to outputs/coco_eval/coco_instances_results.json
[32m[04/15 14:21:10 d2.evaluation.coco_evaluation]: [0mEvaluating predictions ...
Loading and preparing results...
DONE (t=0.00s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.04s).
Accumulating evaluation results...
DONE (t=0.04s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.263
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.619
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.173
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.165
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.290
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.035
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.184
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.408
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.313
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.435
[32m[04/15 14:21:12 d2.evaluation.coco_evaluation]: [0mEvaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 26.305 | 61.922 | 17.265 | 0.000 | 16.489 | 28.996 |
[32m[04/15 14:21:12 d2.evaluation.coco_evaluation]: [0mPer-category bbox AP: 
| category     | AP     | category   | AP   |
|:-------------|:-------|:-----------|:-----|
| atlantic_cod | 26.305 | seithe     | nan  |
